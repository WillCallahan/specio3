name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read
  security-events: write

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Ensure Xcode command line tools are available
        xcode-select --install || true

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Add Poetry to PATH (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "$env:APPDATA\Python\Scripts" >> $env:GITHUB_PATH
        echo "$env:USERPROFILE\.local\bin" >> $env:GITHUB_PATH
      shell: powershell

    - name: Verify Poetry installation
      run: |
        poetry --version
        which poetry || where poetry

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-
          venv-${{ runner.os }}-

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          build/
          specio3/*.so
          specio3/*.pyd
        key: build-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/*.cpp', '**/*.h', 'setup.py') }}
        restore-keys: |
          build-${{ runner.os }}-${{ matrix.python-version }}-
          build-${{ runner.os }}-

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Build C++ extension
      run: poetry run python setup.py build_ext --inplace

    - name: List built extension files (debug)
      run: |
        echo "Contents of specio3/ directory after build:"
        ls -l specio3/
        echo "Current working directory: $(pwd)"

    - name: Print sys.path and CWD before tests (debug)
      run: |
        python -c "import sys, os; print('sys.path:', sys.path); print('CWD:', os.getcwd())"

    - name: Run tests with coverage
      run: |
        poetry run python -m pytest tests/ -v --cov=specio3 --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() && matrix.os == 'ubuntu-latest'
      with:
        files: test-results.xml
        check_name: "Test Results (${{ matrix.os }}, Python ${{ matrix.python-version }})"
        github_token: ${{ secrets.GITHUB_TOKEN }}
        comment_mode: changes
        compare_to_earlier_commit: false
        pull_request_build: merge
        report_individual_runs: true
        deduplicate_classes_by_file_name: false

    - name: Test Report Summary
      uses: phoenix-actions/test-reporting@v12
      if: always() && matrix.os == 'ubuntu-latest' && hashFiles('test-results.xml') != ''
      with:
        name: "Test Results Summary (${{ matrix.os }}, Python ${{ matrix.python-version }})"
        path: test-results.xml
        reporter: java-junit
        fail-on-error: false
        output-to: step-summary

    - name: Test Summary (Cross-platform)
      if: always() && matrix.os != 'ubuntu-latest'
      run: |
        echo "## Test Results for ${{ matrix.os }} - Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        if [ -f test-results.xml ]; then
          echo "✅ Tests completed. Results uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
          if command -v python3 &> /dev/null; then
            python3 - <<'PYTHON' >> $GITHUB_STEP_SUMMARY
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('test-results.xml')
            root = tree.getroot()
            tests = root.get('tests', '0')
            failures = root.get('failures', '0')
            errors = root.get('errors', '0')
            time = root.get('time', '0')
            print(f'**Tests:** {tests} | **Failures:** {failures} | **Errors:** {errors} | **Time:** {time}s')
        except Exception as e:
            print(f'Could not parse test results: {e}')
        PYTHON
          else
            echo "⚠️ python3 not found; skipping test result parsing" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ No test results found" >> $GITHUB_STEP_SUMMARY
        fi
      shell: bash


    - name: Debug test files (on failure)
      if: failure()
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for test files:"
        find . -name "*.xml" -type f || true
        find . -name "*test*" -type f || true
      shell: bash

  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine poetry

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Build source distribution
      run: poetry build

    - name: Check distribution
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.16.2

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_BUILD: cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-manylinux_i686"
        CIBW_BEFORE_BUILD: pip install poetry && poetry install --no-interaction
        CIBW_BUILD_VERBOSITY: 1
        CIBW_TEST_REQUIRES: pytest numpy
        CIBW_TEST_COMMAND: python -c "import specio3; print('Import successful'); print('Available functions:', dir(specio3))"

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/*.whl

  deploy-test-pypi:
    name: Deploy to Test PyPI
    runs-on: ubuntu-latest
    needs: [test, build, build-wheels]
    if: github.ref == 'refs/heads/main'
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/specio3

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Combine all distributions
      run: |
        mkdir -p dist/
        find artifacts/ -name "*.whl" -exec cp {} dist/ \;
        find artifacts/ -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [test, build, build-wheels]
    if: github.event_name == 'release'
    environment:
      name: pypi
      url: https://pypi.org/p/specio3

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Combine all distributions
      run: |
        mkdir -p dist/
        find artifacts/ -name "*.whl" -exec cp {} dist/ \;
        find artifacts/ -name "*.tar.gz" -exec cp {} dist/ \;
        ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run safety check
      run: |
        poetry add --group dev safety
        poetry run safety check --json --output safety-report.json || true

    - name: Run bandit security scan
      run: |
        poetry add --group dev bandit
        poetry run bandit -r specio3/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
